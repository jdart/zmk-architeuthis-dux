/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&lt { quick_tap_ms = <100>; };

/ {
        behaviors {
                lh_pht: left_hand_positional_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "LEFT_POSITIONAL_HOLD_TAP";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        // flavor = "tap-unless-interrupted";
                        tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
                        quick-tap-ms = <200>;
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;    // <---[[right-hand keys]]
                };
                rh_pht: right_hand_positional_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "RIGHT_POSITIONAL_HOLD_TAP";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        // flavor = "tap-unless-interrupted";
                        tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
                        quick-tap-ms = <200>;
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;    // <---[[left-hand keys]]
                };
                combos {
                        compatible = "zmk,combos";
                        // symbols
                        c_LBRC {
                                timeout-ms = <50>;
                                key-positions = <17 27>;
                                bindings = <&kp LBRC>;
                        };
                        c_RBRC {
                                timeout-ms = <50>;
                                key-positions = <7 17>;
                                bindings = <&kp RBRC>;
                        };
                        c_LPAR {
                                timeout-ms = <50>;
                                key-positions = <18 28>;
                                bindings = <&kp LPAR>;
                        };
                        c_RPAR {
                                timeout-ms = <50>;
                                key-positions = <8 18>;
                                bindings = <&kp RPAR>;
                        };
                        c_LBKT {
                                timeout-ms = <50>;
                                key-positions = <16 26>;
                                bindings = <&kp LBKT>;
                        };
                        c_RBKT {
                                timeout-ms = <50>;
                                key-positions = <6 16>;
                                bindings = <&kp RBKT>;
                        };
                        // common shortcuts
                        c_AGL {
                                timeout-ms = <50>;
                                key-positions = <1 11>;
                                bindings = <&kp LA(LG(LARW))>;
                        };
                        c_AGR {
                                timeout-ms = <50>;
                                key-positions = <2 12>;
                                bindings = <&kp LA(LG(RARW))>;
                        };
                        c_GBL {
                                timeout-ms = <50>;
                                key-positions = <11 21>;
                                bindings = <&kp LG(LBKT)>;
                        };
                        c_GBR {
                                timeout-ms = <50>;
                                key-positions = <12 22>;
                                bindings = <&kp LG(RBKT)>;
                        };
                        c_ASU {
                                timeout-ms = <50>;
                                key-positions = <3 13>;
                                bindings = <&kp LA(LS(DARW))>;
                        };
                        c_ASD {
                                timeout-ms = <50>;
                                key-positions = <13 23>;
                                bindings = <&kp LA(LS(UARW))>;
                        };
                        // misc
                        c_esc {
                                timeout-ms = <50>;
                                key-positions = <27 28>;
                                bindings = <&kp ESCAPE>;
                        };
                        c_CLR {
                                timeout-ms = <50>;
                                key-positions = <1 2 4>;
                                bindings = <&bt BT_CLR>;
                        };
                        c_OUT {
                                timeout-ms = <50>;
                                key-positions = <5 6 8>;
                                bindings = <&out OUT_TOG>;
                        };
                        c_RST {
                                timeout-ms = <50>;
                                key-positions = <1 2 3>;
                                bindings = <&reset>;
                        };
                        c_CAPSLOCK {
                                timeout-ms = <50>;
                                key-positions = <12 17>;
                                bindings = <&kp CAPSLOCK>;
                        };
                        c_T {
                                timeout-ms = <50>;
                                key-positions = <2 3>;
                                bindings = <&kp B>;
                        };
                        c_Y {
                                timeout-ms = <50>;
                                key-positions = <6 7>;
                                bindings = <&kp J>;
                        };
                        c_B {
                                timeout-ms = <50>;
                                key-positions = <22 23>;
                                bindings = <&kp V>;
                        };
                        c_N {
                                timeout-ms = <50>;
                                key-positions = <26 27>;
                                bindings = <&kp K>;
                        };
                };
        };

        keymap {
                compatible = "zmk,keymap";
                default_layer {
                        bindings = <
    &kp Q       &kp W        &kp P          &kp F        &kp B          &kp J      &kp L         &kp U           &kp Y       &kp SEMI
    &lh_pht LALT A    &lh_pht LGUI R    &lh_pht LSFT S    &lh_pht LCTL T    &kp G    &kp M    &rh_pht RCTL N    &rh_pht RSFT E    &rh_pht RGUI I    &rh_pht RALT O
    &kp Z       &kp X        &kp C          &kp D        &kp V          &kp K      &kp H         &kp COMMA       &kp DOT     &kp FSLH
                                            &kp BKSP     &lt 1 TAB      &lt 1 RET  &kp SPACE
                        >;
                };

                raise {
                        bindings = <
    &kp DEL     &kp N7      &kp N8       &kp N9      &kp PRCNT          &kp TILDE  &kp EXCL    &kp SQT   &kp DQT     &kp AT
    &kp PLUS    &kp N4      &kp N5       &kp N6      &kp STAR           &kp LARW   &kp DARW    &kp UARW  &kp RARW    &kp EQUAL
    &kp N0      &kp N1      &kp N2       &kp N3      &kp HASH           &kp GRAVE  &kp AMPS    &kp PIPE  &kp UNDER   &kp BSLH
                                         &kp CARET   &kp DLLR           &kp GT     &kp MINUS
                        >;
                };
        };
};

/**
Base Layer
 Q | W | E | R | T      Y | U | I     | O   | P
 A | S | D | F | G      H | J | K     | L   | SEMI
 Z | X | C | V | B      N | M | COMMA | DOT | FSLH
    &lt 1 BKSP | TAB  RET | &lt 1 SPACE

Layer 1
 DEL | 7   | 8   | 9 | %     ~ | ! | ' | " | @
   + | 4   | 5   | 6 | *     l | d | u | r | =
   0 | 1   | 2   | 3 | #     ` | & | | | _ | \
                   ^ | $     > | -

Vertical Combos
   x | AG< | AG> | ASU | x     x | ] | } | ) | x
   x | G[  | G]  | ASD | x     x | [ | { | ( | x

Horizontal Combos
   x   | Q   | T   | x        x | Y   | P   | x
   ALT | GUI | CTL | x        x | CTL | GUI | ALT
   x   | x   | B   | x        x | N   | ESC | x

Shift
 Home row ring and index finger
*/
